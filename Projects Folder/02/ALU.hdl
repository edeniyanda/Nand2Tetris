// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
	//zx
	Mux16(a = x, b = false, sel = zx, out = op01);
	
	//nx
	Not16(in = op01, out = op0201);
	Mux16(a = op01, b = op0201, sel = nx, out = op02);
	
	//zy
	Mux16(a = y, b = false, sel = zy, out = op03);
	
	//ny
	Not16(in = op03, out = op0401);
	Mux16(a = op03, b = op0401, sel = ny, out = op04);
	
	//f
	And16(a = op02, b = op04, out = op0501);
	Add16(a = op02, b = op04, out = op0502);
	Mux16(a = op0501, b = op0502, sel = f, out = op05);
	
	//no and ng
	Not16(in = op05, out = op0601);
	Mux16(a = op05, b = op0601, sel = no, out = out, out[0..7] = op0602, out[8..15] = op0603, out[15] = ng);
	
	//zr
	Or8Way(in = op0602, out = op0701);
	Or8Way(in = op0603, out = op0702);
	Or(a = op0701, b = op0702, out = op07);
	Not(in = op07, out = zr);	
}